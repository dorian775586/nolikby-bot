import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables")
    
# URL –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
FRONTEND_URL = os.getenv("FRONTEND_URL")
if not FRONTEND_URL:
    raise ValueError("FRONTEND_URL is not set in environment variables")
    
# URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
BACKEND_URL = os.getenv("BACKEND_URL")
if not BACKEND_URL:
    raise ValueError("BACKEND_URL is not set in environment variables")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                         reply_markup=main_keyboard())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def main_keyboard():
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=types.WebAppInfo(url=FRONTEND_URL))],
        ]
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@dp.message(Command("offers"))
async def cmd_offers(message: types.Message):
    try:
        response = requests.get(f"{BACKEND_URL}/offers")
        response.raise_for_status()
        offers = response.json()
        
        if not offers:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
            return

        text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
        for offer in offers:
            text += f"**{offer['title']}**\n"
            text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {offer['category']}\n"
            text += f"–ì–æ—Ä–æ–¥: {offer['city']}\n"
            text += f"–°–∫–∏–¥–∫–∞: {offer['discount']}%\n"
            text += f"–¶–µ–Ω–∞: {offer['price']} —Ä—É–±.\n"
            text += f"–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {offer['popularity']}\n"
            text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {offer['end_date']}\n"
            text += "-"*20 + "\n"
        
        await message.answer(text, parse_mode="Markdown")

    except requests.exceptions.RequestException as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
